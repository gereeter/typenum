initSidebarItems({"mod":[["bit","Type-level bits. These are rather simple and are used as the building blocks of the other number types in this crate."],["consts","This module defines aliases for many constants. It is generated by typenum's build script."],["int","Type-level signed integers."],["uint","Type-level unsigned integers."]],"struct":[["Equal","A potential output from `Cmp`, this is the type equivalent to the enum variant `std::cmp::Ordering::Equal`."],["Greater","A potential output from `Cmp`, this is the type equivalent to the enum variant `std::cmp::Ordering::Greater`."],["Less","A potential output from `Cmp`, this is the type equivalent to the enum variant `std::cmp::Ordering::Less`."]],"trait":[["Cmp","A **type operator** for comparing `Self` and `Rhs`. It provides a similar functionality to the function `std::cmp::Ord::cmp` but for types."],["NonZero","A **marker trait** to designate that a type is not zero. All number types in this crate implement `NonZero` except `B0`, `U0`, and `Z0`."],["Ord","A **Marker trait** for the types `Greater`, `Equal`, and `Less`."],["Pow","A **type operator** that provides exponentiation by repeated squaring."],["Same","A **type operator** that ensures that `Rhs` is the same as `Self`, it is mainly useful for writing macros that can take arbitrary binary or unary operators."]]});